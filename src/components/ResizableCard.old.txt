// // ResizableCard.tsx
// import React from 'react';
// import { Resizable, ResizeCallbackData } from 'react-resizable';
// import { useAppDispatch } from '../store/hooks';
// import { updateCard } from '../store/slices/designerSlice';

// interface ResizableCardProps {
//   width?: number;
//   height?: number;
//   children: React.ReactNode;
//   onResize?: (size: { width: number; height: number }) => void;
// }

// const ResizableCard: React.FC<ResizableCardProps> = ({ 
//   width = 300, 
//   height = 200, 
//   children,
//   onResize 
// }) => {
//   const handleResize = (e: React.SyntheticEvent, data: ResizeCallbackData) => {
//     onResize?.(data.size);
//   };

//   return (
//     <Resizable
//       width={width}
//       height={height}
//       onResize={handleResize}
//       minConstraints={[200, 100]}
//       maxConstraints={[800, 600]}
//       resizeHandles={['se', 'sw', 'ne', 'nw']}
//       handle={(h) => (
//         <div className={`
//           w-4 h-4 bg-white/20 rounded-full absolute 
//           hover:bg-white/40 transition-colors cursor-${h}-resize
//           ${h.includes('w') ? 'left-0' : 'right-0'}
//           ${h.includes('n') ? 'top-0' : 'bottom-0'}
//         `} />
//       )}
//     >
//       <div style={{ width, height }} className="relative">
//         {children}
//       </div>
//     </Resizable>
//   );
// };

// export default ResizableCard;
